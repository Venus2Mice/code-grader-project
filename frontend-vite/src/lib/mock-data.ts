import type { Class, Problem, Student, Submission } from "@/types"

export const mockClasses: Class[] = [
  {
    id: "1",
    name: "Data Structures & Algorithms",
    description: "Learn fundamental data structures and algorithms using C++",
    code: "CS301",
    teacherId: "teacher1",
    createdAt: new Date("2024-01-15"),
    studentCount: 24,
  },
  {
    id: "2",
    name: "Advanced Programming",
    description: "Advanced C++ programming concepts and techniques",
    code: "CS401",
    teacherId: "teacher1",
    createdAt: new Date("2024-02-01"),
    studentCount: 18,
  },
  {
    id: "3",
    name: "Introduction to Programming",
    description: "Basic programming concepts with C++",
    code: "CS101",
    teacherId: "teacher1",
    createdAt: new Date("2024-01-10"),
    studentCount: 32,
  },
]

export const mockProblems: Problem[] = [
  {
    id: "1",
    classId: "1",
    title: "Two Sum",
    description:
      "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
    difficulty: "easy",
    timeLimit: 1000,
    memoryLimit: 256,
    gradingMode: "function",
    functionSignature: "vector<int> twoSum(vector<int>& nums, int target)",
    testCases: [
      {
        id: "1-1",
        input: "[2,7,11,15]\n9",
        expectedOutput: "[0,1]",
        isHidden: false,
        points: 20,
      },
      {
        id: "1-2",
        input: "[3,2,4]\n6",
        expectedOutput: "[1,2]",
        isHidden: false,
        points: 20,
      },
      {
        id: "1-3",
        input: "[3,3]\n6",
        expectedOutput: "[0,1]",
        isHidden: true,
        points: 20,
      },
      {
        id: "1-4",
        input: "[1,5,3,7,9,2]\n10",
        expectedOutput: "[2,4]",
        isHidden: true,
        points: 20,
      },
      {
        id: "1-5",
        input: "[-1,-2,-3,-4,-5]\n-8",
        expectedOutput: "[2,4]",
        isHidden: true,
        points: 20,
      },
    ],
    createdAt: new Date("2024-01-20"),
  },
  {
    id: "2",
    classId: "1",
    title: "Binary Search",
    description:
      "Given a sorted array of integers nums and an integer target, write a function to search target in nums. If target exists, return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
    difficulty: "medium",
    timeLimit: 1000,
    memoryLimit: 256,
    gradingMode: "stdio",
    testCases: [
      {
        id: "2-1",
        input: "5\n-1 0 3 5 9 12\n9",
        expectedOutput: "4",
        isHidden: false,
        points: 25,
      },
      {
        id: "2-2",
        input: "5\n-1 0 3 5 9 12\n2",
        expectedOutput: "-1",
        isHidden: false,
        points: 25,
      },
      {
        id: "2-3",
        input: "1\n5\n5",
        expectedOutput: "0",
        isHidden: true,
        points: 25,
      },
      {
        id: "2-4",
        input: "10\n1 2 3 4 5 6 7 8 9 10\n1",
        expectedOutput: "0",
        isHidden: true,
        points: 25,
      },
    ],
    createdAt: new Date("2024-01-22"),
  },
  {
    id: "3",
    classId: "1",
    title: "Reverse Linked List",
    description: "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    difficulty: "easy",
    timeLimit: 1000,
    memoryLimit: 256,
    gradingMode: "function",
    functionSignature: "ListNode* reverseList(ListNode* head)",
    testCases: [
      {
        id: "3-1",
        input: "[1,2,3,4,5]",
        expectedOutput: "[5,4,3,2,1]",
        isHidden: false,
        points: 50,
      },
      {
        id: "3-2",
        input: "[1,2]",
        expectedOutput: "[2,1]",
        isHidden: false,
        points: 50,
      },
    ],
    createdAt: new Date("2024-01-25"),
  },
]

export const mockStudents: Student[] = [
  {
    id: "1",
    name: "John Doe",
    email: "john@example.com",
    enrolledAt: new Date("2024-01-16"),
  },
  {
    id: "2",
    name: "Jane Smith",
    email: "jane@example.com",
    enrolledAt: new Date("2024-01-16"),
  },
  {
    id: "3",
    name: "Bob Johnson",
    email: "bob@example.com",
    enrolledAt: new Date("2024-01-17"),
  },
  {
    id: "4",
    name: "Alice Williams",
    email: "alice@example.com",
    enrolledAt: new Date("2024-01-18"),
  },
  {
    id: "5",
    name: "Charlie Brown",
    email: "charlie@example.com",
    enrolledAt: new Date("2024-01-19"),
  },
]

export const mockSubmissions: Submission[] = [
  {
    id: "1",
    problemId: "1",
    studentId: "1",
    code: "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if (map.find(complement) != map.end()) {\n            return {map[complement], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}",
    language: "cpp",
    status: "accepted",
    score: 100,
    totalTests: 5,
    passedTests: 5,
    submittedAt: new Date("2024-03-15T10:30:00"),
  },
  {
    id: "2",
    problemId: "1",
    studentId: "1",
    code: "#include <vector>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[i] + nums[j] == target) {\n                return {i, j};\n            }\n        }\n    }\n    return {};\n}",
    language: "cpp",
    status: "wrong_answer",
    score: 60,
    totalTests: 5,
    passedTests: 3,
    submittedAt: new Date("2024-03-15T09:15:00"),
  },
  {
    id: "3",
    problemId: "1",
    studentId: "2",
    code: "#include <vector>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target {\n    return {};\n}",
    language: "cpp",
    status: "compile_error",
    score: 0,
    totalTests: 5,
    passedTests: 0,
    submittedAt: new Date("2024-03-15T08:45:00"),
  },
  {
    id: "4",
    problemId: "1",
    studentId: "3",
    code: "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for (int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if (map.find(complement) != map.end()) {\n            return {map[complement], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}",
    language: "cpp",
    status: "accepted",
    score: 100,
    totalTests: 5,
    passedTests: 5,
    submittedAt: new Date("2024-03-15T11:20:00"),
  },
  {
    id: "5",
    problemId: "2",
    studentId: "1",
    code: "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint binarySearch(vector<int>& nums, int target) {\n    int left = 0, right = nums.size() - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (nums[mid] == target) return mid;\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\nint main() {\n    int n, target;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) cin >> nums[i];\n    cin >> target;\n    cout << binarySearch(nums, target) << endl;\n    return 0;\n}",
    language: "cpp",
    status: "accepted",
    score: 100,
    totalTests: 4,
    passedTests: 4,
    submittedAt: new Date("2024-03-16T14:30:00"),
  },
  {
    id: "6",
    problemId: "2",
    studentId: "2",
    code: "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    int n, target;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) cin >> nums[i];\n    cin >> target;\n    for (int i = 0; i < n; i++) {\n        if (nums[i] == target) {\n            cout << i << endl;\n            return 0;\n        }\n    }\n    cout << -1 << endl;\n    return 0;\n}",
    language: "cpp",
    status: "time_limit",
    score: 50,
    totalTests: 4,
    passedTests: 2,
    submittedAt: new Date("2024-03-16T15:00:00"),
  },
  {
    id: "7",
    problemId: "2",
    studentId: "4",
    code: "#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, target;\n    cin >> n;\n    int nums[n];\n    for (int i = 0; i < n; i++) cin >> nums[i];\n    cin >> target;\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] == target) {\n            cout << mid << endl;\n            return 0;\n        }\n        if (nums[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    cout << -1 << endl;\n    return 0;\n}",
    language: "cpp",
    status: "accepted",
    score: 100,
    totalTests: 4,
    passedTests: 4,
    submittedAt: new Date("2024-03-16T16:45:00"),
  },
]
